////  Palindrome Linked List.swift//////  Created by Eric Tang on 2024/01/08.///**Given the head of a singly linked list, return true if it is a palindrome or false otherwise. Example 1:￼Input: head = [1,2,2,1]Output: trueExample 2:￼Input: head = [1,2]Output: false Constraints:The number of nodes in the list is in the range [1, 105].0 <= Node.val <= 9 Follow up: Could you do it in O(n) time and O(1) space?*/import Foundationpublic class ListNode {    public var val: Int    public var next: ListNode?    public init() { self.val = 0; self.next = nil; }    public init(_ val: Int) { self.val = val; self.next = nil; }    public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }}class Solution {    func isPalindrome(_ head: ListNode?) -> Bool {        var fast = head, slow = head        while fast != nil || fast?.next != nil {            fast = fast?.next?.next            slow = slow?.next        }                var reversed = reverse(slow)        var curr = head                while reversed != nil || reversed?.next != nil {            if curr?.val != reversed?.val {                return false            }            curr = curr?.next            reversed = reversed?.next        }        return true    }        func reverse(_ listNode: ListNode?) -> ListNode? {        var prev: ListNode? = nil        var curr: ListNode? = listNode                while curr != nil || curr?.next != nil {            var temp = curr?.next            curr?.next = prev            prev = curr            curr = temp        }        return prev!    }}let solution = Solution()solution.isPalindrome(.init(1, .init(2, .init(2, .init(1, nil)))))solution.isPalindrome(.init(1, .init(2, nil)))